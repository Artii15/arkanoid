#version 130

#define MAX_LIGHTS 1 // Zawsze ustawiać <= liczbie świateł z game.cpp

struct light{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 position;
	int shininess;
	float k;
};

in vec2 iTexCoord; // Współrzędne teksturowania interpolowane
// Wektory
in vec4 iN;
in vec4 iV;
in vec4 iL;

// Odległość od światła
in float iDist;

out vec4 pixelColor; //Zmienna wyjsciowa fragment shadera. Zapisuje sie do niej ostateczny (prawie) kolor piksela

// Jednostki teksturujące
uniform sampler2D ambientSamp;
uniform sampler2D diffuseSamp;
uniform sampler2D specularSamp;
uniform light lights[MAX_LIGHTS];


void main(void) {
	vec4 Md = texture(diffuseSamp, iTexCoord);
	vec4 Ma = texture(ambientSamp, iTexCoord);
	vec4 Ms = texture(specularSamp, iTexCoord);
	
	vec4 l = normalize(iL);
	vec4 v = normalize(iV);
	vec4 n = normalize(iN);
	vec4 r = reflect(-l, n);

	// Cosinus kąta między wektorem normalnym, a promieniem światła
	float nl = max(dot(n, l), 0); // Dzięki normalizacji, bez dzielenia przez długości wektorów
	
	// Składowa światła rozproszonego
	vec3 diffuse = (lights[0].diffuse).rgb*Md.rgb*vec3(nl,nl,nl); // Na razie na sztywno kolor światła rozpraszanego, wszystkie "sztywne światła" deklarować jako uniformy
	
	// Światło otoczenia
	vec3 ambientColor = vec3(0,0,0);
	vec3 ambient = ambientColor*Ma.rgb;
	
	//Światło odbite
	float shininess = 50;
	float rv = pow(max(dot(r, v),0),shininess);
	vec3 reflectedColor = vec3(1,1,1); // Również przenieść do uniformu
	vec3 specular = reflectedColor*Ms.rgb*vec3(rv,rv,rv);
	
	// Osłabianie światła wraz z odległością
	float attenuation = 1.0 / (1.0 + lights[0].k * pow(iDist, 2)); // Współczynnik osłabienia (0.05) powinien być w uniformie
	
	pixelColor.rgb = ambient + attenuation*(diffuse + specular);
	pixelColor.a = 1;
}
