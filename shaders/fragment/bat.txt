#version 130

in vec2 iTexCoord; // Współrzędne teksturowania interpolowane

in vec4 iN;
in vec4 iV;
in vec4 iL;

out vec4 pixelColor; //Zmienna wyjsciowa fragment shadera. Zapisuje sie do niej ostateczny (prawie) kolor piksela

uniform sampler2D textureMap0;

void main(void) {
	vec4 materialColor = texture(textureMap0, iTexCoord);
	
	vec4 l = normalize(iL);
	vec4 v = normalize(iV);
	vec4 n = normalize(iN);
	vec4 r = reflect(-l, n);

	// Cosinus kąta między wektorem normalnym, a promieniem światła
	float cosNL = max(dot(n, l), 0); // Dzięki normalizacji, bez dzielenia przez długości wektorów
	
	// Składowa światła rozproszonego
	vec3 diffuse = cosNL*materialColor.rgb*vec3(1,1,1); // Na razie na sztywno kolor światła rozpraszanego

	pixelColor.rgb = diffuse;
	
	pixelColor.a = 1;
}
